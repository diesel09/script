#!/bin/bash

SCPdir="/etc/newadm"
SCPusr="${SCPdir}/ger-user"
SCPfrm="/etc/ger-frm"
SCPfrm3="/etc/adm-lite"
SCPinst="/etc/ger-inst"
SCPidioma="${SCPdir}/idioma"


declare -A TIMEUS
SCPdir="/etc/newadm"
SCPdir2="/etc/ger-frm"
SCPusr="${SCPdir}/ger-user"
MyPID="${SCPusr}/pid-adm"
MyTIME="${SCPusr}/time-adm"
USRdatabase="/etc/ADMuser"
USRdatabaseh="${SCPdir}/User-HWID"
tokens="${SCPdir}/User-TOKEN"
VERY="$(ps aux|grep "${SCPusr}/usercodes verificar"| grep -v grep)"
VERY2="$(ps aux|grep "${SCPusr}/usercodes desbloqueo"| grep -v grep)"
[[ -e ${MyPID} ]] && source ${MyPID} || touch ${MyPID}
[[ -e ${MyTIME} ]] && source ${MyTIME} || touch ${MyTIME}
[[ ! -e ${USRdatabase} ]] && touch ${USRdatabase}
sort ${USRdatabase} | uniq > ${USRdatabase}tmp
mv -f ${USRdatabase}tmp ${USRdatabase}

menu_crearuser(){
 clear
 msg -bar
 msg -tit
 msg -ama " \e[1;33m[1] \e[37mCREAR CUENTA NORMAL \e[0m \n \e[1;33m[2] \e[37mCREAR CUENTA HWID \e[0m\n \e[1;33m[3] \e[37mCREAR CUENTA TOKEN \e[0m\n \e[1;31m[0] \e[1;37m<- VOLVER"
 msg -bar
 read -p " $(echo -e "\e[1;37mSeleccione Una Opcion [1/3]:\e[1;33m") " cuen
 case $cuen in
 1)new_user;;
 2)new_hwid;;
 3)new_token;;
 0) ;;
 esac
 }
new_hwid () {
 clear
 clear
 msg -bar
 usuarios_ativo=($(cat ${USRdatabaseh}|cut -d'|' -f1))
 usuarios_ativos=('' $(mostrar_usuario))
 if [[ -z ${usuarios_ativos[@]} ]]; then
 msg -tit
 msg -ama "   AGREGAR USUARIO HWID| Ningun Usuario Registrado"
 msg -bar
 else
 msg -tit
 msg -ama "  AGREGAR USUARIO HWID| Usuarios  Activos en Servidor"
 msg -bar
 for us in $(echo ${usuarios_ativos[@]}); do
 msg -ne " >> Usuario: " && echo "${us}"
 done
 msg -bar
 fi
 while true; do
 msg -ne "$(fun_trans "Nombre Del Usuario")"
 read -p ": " usuario
 usuario="$(echo $usuario|sed -e 's/[^a-z0-9 -]//ig')"
 if [[ -z $usuario ]]; then
 err_fun 1 && continue
 elif [[ "${#usuario}" -lt "3" ]]; then
 err_fun 2 && continue
 elif [[ "${#usuario}" -gt "12" ]]; then
 err_fun 3 && continue
 elif [[ "$(echo ${usuarios_ativos[@]}|grep -w "$usuario")" ]]; then
 err_fun 14 && continue
 fi
 break
 done
 while true; do
 msg -ne "$(fun_trans "Ingrese El HWID")"
 read -p ": " hwid
 if [[ -z $hwid ]]; then
 err_fun 4 && continue
 elif [[ "${#hwid}" -lt "29" ]]; then
 err_fun 5 && continue
 elif [[ "${#hwid}" -gt "36" ]]; then
 err_fun 6 && continue
 fi
 break
 done
 while true; do
 msg -ne "$(fun_trans "Tiempo de Duracion")"
 read -p ": " diasuser
 if [[ -z "$diasuser" ]]; then
 err_fun 7 && continue
 elif [[ "$diasuser" != +([0-9]) ]]; then
 err_fun 8 && continue
 elif [[ "$diasuser" -gt "360" ]]; then
 err_fun 9 && continue
 fi
 break
 done
 clear
 echo ""
 msg -bar
 add_hwid "${usuario}" "${hwid}" "${diasuser}"
 msg -ne "$(fun_trans "  >> IP"): " && echo -e "$(meu_ip)"
 msg -ne "$(fun_trans "  >> Usuario"): " && echo -e "$usuario"
 msg -ne "$(fun_trans "  >> HWID"): " && echo -e "$hwid"
 msg -ne "$(fun_trans "  >> Dias de Duracion"): " && echo -e "$diasuser"
 msg -ne "$(fun_trans "  >> Fecha de Expiracion"): " && echo -e "$(date "+%F" -d " + $diasuser days")"
 msg -bar
 msg -ne " Enter Para Continuar" && read enter
 ${SCPusr}/usercodes
 }
 new_token () {
 clear
 clear
 msg -bar
 usuarios_ativo=($(cat ${tokens}|cut -d'|' -f1))
 usuarios_ativos=('' $(mostrar_token))
 if [[ -z ${usuarios_ativos[@]} ]]; then
 msg -tit
 msg -ama "   AGREGAR USUARIO TOKEN| Ningun Usuario Registrado"
 msg -bar
 else
 msg -tit
 msg -ama "  AGREGAR USUARIO TOKEN| Usuarios  Activos en Servidor"
 msg -bar
 for us in $(echo ${usuarios_ativos[@]}); do
 msg -ne " >> Usuario: " && echo "${us}"
 done
 msg -bar
 fi
 while true; do
 msg -ne "$(fun_trans "Nombre Del Usuario")"
 read -p ": " usuario
 usuario="$(echo $usuario|sed -e 's/[^a-z0-9 -]//ig')"
 if [[ -z $usuario ]]; then
 err_fun 1 && continue
 elif [[ "${#usuario}" -lt "3" ]]; then
 err_fun 2 && continue
 elif [[ "${#usuario}" -gt "12" ]]; then
 err_fun 3 && continue
 elif [[ "$(echo ${usuarios_ativos[@]}|grep -w "$usuario")" ]]; then
 err_fun 14 && continue
 fi
 break
 done
 while true; do
 msg -ne "$(fun_trans "Ingrese su TOKEN")"
 read -p ": " toke
 if [[ -z $toke ]]; then
 err_fun 4 && continue
 elif [[ "${#toke}" -lt "6" ]]; then
 err_fun 5 && continue
 elif [[ "${#toke}" -gt "36" ]]; then
 err_fun 6 && continue
 fi
 break
 done
 while true; do
 msg -ne "$(fun_trans "Tiempo de Duracion")"
 read -p ": " diasuser
 if [[ -z "$diasuser" ]]; then
 err_fun 7 && continue
 elif [[ "$diasuser" != +([0-9]) ]]; then
 err_fun 8 && continue
 elif [[ "$diasuser" -gt "360" ]]; then
 err_fun 9 && continue
 fi
 break
 done
 clear
 echo ""
 msg -bar
 add_token "${usuario}" "${toke}" "${diasuser}"
 msg -ne "$(fun_trans "  >> IP"): " && echo -e "$(meu_ip)"
 msg -ne "$(fun_trans "  >> Usuario"): " && echo -e "$usuario"
 msg -ne "$(fun_trans "  >> TOKEN"): " && echo -e "$toke"
 msg -ne "$(fun_trans "  >> Dias de Duracion"): " && echo -e "$diasuser"
 msg -ne "$(fun_trans "  >> Fecha de Expiracion"): " && echo -e "$(date "+%F" -d " + $diasuser days")"
 msg -bar
 msg -ne " Enter Para Continuar" && read enter
 ${SCPusr}/usercodes
 }
menudel(){
 clear
 msg -bar
 msg -tit
 msg -ama " \e[1;33m[1] \e[1;31mREMOVER CUENTAS SSH  \n \e[1;33m[2] \e[1;31mREMOVER CUENTAS HWID\n \e[1;33m[3] \e[1;31mREMOVER CUENTAS TOKEN\n \e[1;33m[4] \e[1;37mREMOVER CUENTAS SSH,HWID,TOKEN\n \e[1;31m[0] \e[1;37m<- VOLVER"
 msg -bar
 read -p " $(echo -e "\e[1;37mSeleccione Una Opcion [1/3]:\e[1;33m") " cuen
 case $cuen in
 1)remove_user;;
 2)remove_hwid;;
 3)remove_token;;
 4)remove_allus;;
 0) ;;
 esac
 }
remove_hwid () {
 clear
 clear
 red=$(tput setaf 1)
 gren=$(tput setaf 2)
 yellow=$(tput setaf 3)
 msg -bar
 usuarios_ativos=('' $(mostrar_usuario))
 msg -ama "$(fun_trans "REMOVER USUARIOS")"
 msg -bar
 data_hwid
 msg -ama "$(fun_trans "Escriba o Seleccione un Usuario")"
 msg -bar
 unset selection
 while [[ -z ${selection} ]]; do
 msg -azu "$(fun_trans "Seleccione Una Opcion"): " && read selection
 tput cuu1 && tput dl1
 done
 [[ ${selection} = "0" ]] && return
 if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
 usuario_del="${usuarios_ativos[$selection]}"
 else
 usuario_del="$selection"
 fi
 [[ -z $usuario_del ]] && {
 msg -verm "$(fun_trans "Error, Usuario Invalido")"
 msg -bar
 return 1
 }
 [[ ! $(echo ${usuarios_ativos[@]}|grep -w "$usuario_del") ]] && {
 msg -verm "$(fun_trans "Error, Usuario Invalido")"
 msg -bar
 return 1
 }
 msg -ama "$(fun_trans "Usuario Seleccionado"): $usuario_del"
 pkill -u $usuario_del
 droplim=`droppids|grep -w "$usuario_del"|awk '{print $2}'`
 kill -9 $droplim &>/dev/null
 rm_hwid "$usuario_del"
 msg -bar
 msg -ne " Enter Para Continuar" && read enter
 ${SCPusr}/usercodes
 }
 remove_token () {
 clear
 clear
 red=$(tput setaf 1)
 gren=$(tput setaf 2)
 yellow=$(tput setaf 3)
 msg -bar
 usuarios_ativos=('' $(mostrar_token))
 msg -ama "$(fun_trans "REMOVER USUARIOS")"
 msg -bar
 data_token
 msg -ama "$(fun_trans "Escriba o Seleccione un Usuario")"
 msg -bar
 unset selection
 while [[ -z ${selection} ]]; do
 msg -azu "$(fun_trans "Seleccione Una Opcion"): " && read selection
 tput cuu1 && tput dl1
 done
 [[ ${selection} = "0" ]] && return
 if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
 usuario_del="${usuarios_ativos[$selection]}"
 else
 usuario_del="$selection"
 fi
 [[ -z $usuario_del ]] && {
 msg -verm "$(fun_trans "Error, Usuario Invalido")"
 msg -bar
 return 1
 }
 [[ ! $(echo ${usuarios_ativos[@]}|grep -w "$usuario_del") ]] && {
 msg -verm "$(fun_trans "Error, Usuario Invalido")"
 msg -bar
 return 1
 }
 msg -ama "$(fun_trans "Usuario Seleccionado"): $usuario_del"
 pkill -u $usuario_del
 droplim=`droppids|grep -w "$usuario_del"|awk '{print $2}'`
 kill -9 $droplim &>/dev/null
 rm_token "$usuario_del"
 msg -bar
 msg -ne " Enter Para Continuar" && read enter
 ${SCPusr}/usercodes
 }
remove_allus () {
 clear
 clear
 msg -bar
 usuarios_ativos=($(mostrar_usuarios))
 if [[ -z ${usuarios_ativos[@]} ]]; then
 msg -tit
 msg -verm "$(fun_trans " BORAR USUARIO | Ningun usuario registrado")"
 msg -bar
 return 1
 else
 msg -tit
 msg -ama "$(fun_trans " BORAR USUARIO |  Usuarios Activos del Servidor")"
 msg -bar
 i=0
 for us in $(echo ${usuarios_ativos[@]}); do
 msg -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
 let i++
 done
 msg -bar
 fi
 msg -ama "$(fun_trans "Escriba o Seleccione un Usuario")"
 msg -bar
 msg -ama "\033[1;31mSe recomienda desbloquear todas las cuentas \nbloqueadas antes de borrar algun usuario."
 msg -bar
 unset selection
 while [[ -z ${selection} ]]; do
 echo -ne "\033[1;37m$(fun_trans "Seleccione Una Opcion"): " && read selection
 tput cuu1 && tput dl1
 done
 if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
 usuario_del="${usuarios_ativos[$selection]}"
 else
 usuario_del="$selection"
 fi
 [[ -z $usuario_del ]] && {
 msg -verm "$(fun_trans "Error, Usuario Invalido")"
 msg -bar
 return 1
 }
 [[ ! $(echo ${usuarios_ativos[@]}|grep -w "$usuario_del") ]] && {
 msg -verm "$(fun_trans "Error, Usuario Invalido")"
 msg -bar
 return 1
 }
 msg -ne "$(fun_trans "Usuario Seleccionado"): " && echo -ne "$usuario_del"
 pkill -u $usuario_del
 droplim=`dropbear_pids|grep -w "$usuario_del"|cut -d'|' -f2`
 kill -9 $droplim &>/dev/null
 rm_user "$usuario_del" && msg -verd " [$(fun_trans "Removido")]" || msg -verm " [$(fun_trans "No Removido")]"
 rm -rf /etc/VPS-MX/VPS-MX-userlock
 rm -rf /etc/VPS-MX/controlador/Limiter.log
 unlockall2
 msg -bar
 msg -ne " Enter Para Continuar" && read enter
 ${SCPusr}/usercodes
 }

menudata(){
 clear
 msg -bar
 msg -tit
 msg -ama " \e[1;33m[1] \e[37mDETALLES DE CUENTAS SSH \e[0m\n \e[1;33m[2] \e[37mDETALLES DE CUENTAS HWID \e[0m\n \e[1;33m[3] \e[37mDETALLES DE CUENTAS TOKEN \e[0m\n \e[1;31m[0] \e[1;37m<- VOLVER"
 msg -bar
 read -p " $(echo -e "\e[1;37mSeleccione Una Opcion [1/3]:\e[1;33m") " cuen
 case $cuen in
 1)detail_user;;
 2)data_hwid;;
 3)data_token;;
 0) ;;
 esac
 }
data_hwid(){
 clear
 msg -bar
 msg -tit
 msg -ama "$(fun_trans "        INFORMACION DE USUARIOS HWID REGISTRADOS ")"
 msg -bar
 cat_users=$(cat "/etc/passwd"|grep 'home'|grep 'hwid'|grep -v 'syslog')
 dat_us=$(printf '%-20s%-12s%-8s%s' 'Cliente' 'Fecha' 'Dias' 'Statu')
 msg -azu "  N°  $dat_us"
 msg -bar
 i=1
 for u in `echo "${cat_users}"|awk -F ':' '{print $1}'`; do
 fix_hwid_token=$(echo "${cat_users}"|grep -w "$u"|awk -F ':' '{print $5}'|cut -d ',' -f1) && [[ "${fix_hwid_token}" != @(hwid) ]] && continue
 fecha=$(chage -l "$u"|sed -n '4p'|awk -F ': ' '{print $2}')
 mes_dia=$(echo $fecha|awk -F ',' '{print $1}'|sed 's/ //g')
 ano=$(echo $fecha|awk -F ', ' '{printf $2}'|cut -c 3-)
 us=$(printf '%-12s' "$u")
 pass=$(cat "/etc/passwd"|grep -w "$u"|awk -F ':' '{print $5}'|cut -d ',' -f2)
 [[ "${#pass}" -gt '12' ]] && pass="Desconocida"
 pass="$(printf '%-19s' "$pass")"
 unset stat
 if [[ $(passwd --status $u|cut -d ' ' -f2) = "P" ]]; then
 stat="$(msg -verd "◉ ")"
 else
 stat="$(msg -verm2 "📵 ")"
 fi
 echo -ne "  $(msg -verd "$i)")$(msg -verm2 "-") $(msg -azu "${pass}")"
 if [[ $(echo $fecha|awk '{print $2}') = "" ]]; then
 exp="$(printf '%8s%-2s' '[X]')"
 exp+="$(printf '%-6s' '[X]')"
 echo " $(msg -verm2 "$fecha")$(msg -verd "$exp")$(echo -e "$stat")"
 else
 if [[ $(date +%s) -gt $(date '+%s' -d "${fecha}") ]]; then
 exp="$(printf '%-5s' "Exp")"
 echo " $(msg -verm2 "$mes_dia/$ano")  $(msg -verm2 "$exp")$(echo -e "$stat")"
 else
 EXPTIME="$(($(($(date '+%s' -d "${fecha}") - $(date +%s))) / 86400))"
 if [[ "${#EXPTIME}" = "1" ]]; then
 exp="$(printf '%6s%-7s' "$EXPTIME")"
 elif [[ "${#EXPTIME}" = "2" ]]; then
 exp="$(printf '%7s%-6s' "$EXPTIME")"
 else
 exp="$(printf '%7s%-5s' "$EXPTIME")"
 fi
 echo " $(msg -verm2 "$mes_dia/$ano")$(msg -verd "$exp")$(echo -e "$stat")"
 fi
 fi
 echo -e "      $(msg -ama "HWID:") $(msg -azu "${us}")"
 msg -bar3
 let i++
 done
 msg -bar
 }
 data_token(){
 clear
 msg -bar
 msg -tit
 msg -ama "$(fun_trans "        INFORMACION DE USUARIOS TOKEN REGISTRADOS ")"
 msg -bar
 cat_users=$(cat "/etc/passwd"|grep 'home'|grep 'token'|grep -v 'syslog')
 dat_us=$(printf '%-20s%-12s%-8s%s' 'Cliente' 'Fecha' 'Dias' 'Statu')
 msg -azu "  N°  $dat_us"
 msg -bar
 i=1
 for u in `echo "${cat_users}"|awk -F ':' '{print $1}'`; do
 fix_hwid_token=$(echo "${cat_users}"|grep -w "$u"|awk -F ':' '{print $5}'|cut -d ',' -f1) && [[ "${fix_hwid_token}" != @(hwid) ]] && continue
 fecha=$(chage -l "$u"|sed -n '4p'|awk -F ': ' '{print $2}')
 mes_dia=$(echo $fecha|awk -F ',' '{print $1}'|sed 's/ //g')
 ano=$(echo $fecha|awk -F ', ' '{printf $2}'|cut -c 3-)
 us=$(printf '%-12s' "$u")
 pass=$(cat "/etc/passwd"|grep -w "$u"|awk -F ':' '{print $5}'|cut -d ',' -f2)
 [[ "${#pass}" -gt '12' ]] && pass="Desconocida"
 pass="$(printf '%-19s' "$pass")"
 unset stat
 if [[ $(passwd --status $u|cut -d ' ' -f2) = "P" ]]; then
 stat="$(msg -verd "◉ ")"
 else
 stat="$(msg -verm2 "📵 ")"
 fi
 echo -ne "  $(msg -verd "$i)")$(msg -verm2 "-") $(msg -azu "${pass}")"
 if [[ $(echo $fecha|awk '{print $2}') = "" ]]; then
 exp="$(printf '%8s%-2s' '[X]')"
 exp+="$(printf '%-6s' '[X]')"
 echo " $(msg -verm2 "$fecha")$(msg -verd "$exp")$(echo -e "$stat")"
 else
 if [[ $(date +%s) -gt $(date '+%s' -d "${fecha}") ]]; then
 exp="$(printf '%-5s' "Exp")"
 echo " $(msg -verm2 "$mes_dia/$ano")  $(msg -verm2 "$exp")$(echo -e "$stat")"
 else
 EXPTIME="$(($(($(date '+%s' -d "${fecha}") - $(date +%s))) / 86400))"
 if [[ "${#EXPTIME}" = "1" ]]; then
 exp="$(printf '%6s%-7s' "$EXPTIME")"
 elif [[ "${#EXPTIME}" = "2" ]]; then
 exp="$(printf '%7s%-6s' "$EXPTIME")"
 else
 exp="$(printf '%7s%-5s' "$EXPTIME")"
 fi
 echo " $(msg -verm2 "$mes_dia/$ano")$(msg -verd "$exp")$(echo -e "$stat")"
 fi
 fi
 echo -e "      $(msg -ama "TOKEN:") $(msg -azu "${us}")"
 msg -bar3
 let i++
 done
 msg -bar
 }
menumoni(){
 clear
 msg -bar
 msg -tit
 msg -ama " \e[1;33m[1] \e[37mMONITOR DE CUENTAS SSH\e[0m\n \e[1;33m[2] \e[37mMONITOR DE CUENTAS HWID\e[0m\n \e[1;33m[3] \e[37mMONITOR DE CUENTAS TOKEN\e[0m\n \e[1;31m[0] \e[1;37m<- VOLVER"
 msg -bar
 read -p " $(echo -e "\e[1;37mSeleccione Una Opcion [1/3]:\e[1;33m") " cuen
 case $cuen in
 1)monit_user;;
 2)monit_hwid;;
 3)monit_token;;
 0) ;;
 esac
 }
 monit_hwid () {
 clear
 clear
 msg -bar
 msg -tit
 red=$(tput setaf 1)
 gren=$(tput setaf 2)
 yellow=$(tput setaf 3)
 echo -e "$(fun_trans "\e[93m   MONITOR DE CONEXIONES SSH/DROPBEAR/SSL/OPENVPN")"
 msg -bar
 txtvar=$(printf '%-13s' " USUARIO")
 txtvar+=$(printf '%-20s' "CONEXIONES")
 txtvar+=$(printf '%-10s' "TIME/ON")
 echo -e "  \e[1;33m${txtvar}\e[0m"
 msg -bar
 cat_users=$(cat "/etc/passwd"|grep 'home'|grep 'hwid'|grep -v 'syslog')
 for i in `echo "$cat_users"|awk -F ':' '{print $1}'`; do
 hwid="$i"
 nom="$(echo "$cat_users"|grep -w "$i"|awk -F ':' '{print $5}'|cut -d ',' -f2)"
 user=$(printf '%-10s' " ${nom}")
 sep=$(printf '%-5s')
 _=$(
 PID="0+"
 [[ $(dpkg --get-selections|grep -w "openssh"|head -1) ]] && PID+="$(ps aux|grep -v grep|grep sshd|grep -w "$hwid"|grep -v root|wc -l)+"
 [[ $(dpkg --get-selections|grep -w "dropbear"|head -1) ]] && PID+="$(dropbear_pids|grep -w "${hwid}"|wc -l)+"
 [[ $(dpkg --get-selections|grep -w "openvpn"|head -1) ]] && [[ -e /etc/openvpn/openvpn-status.log ]] && [[ $(openvpn_pids|grep -w "$hwid"|cut -d'|' -f2) ]] && PID+="$(openvpn_pids|grep -w "$hwid"|cut -d'|' -f2)+"
 PID+="0"
 TIMEON="${TIMEUS[$hwid]}"
 [[ -z $TIMEON ]] && TIMEON=0
 MIN=$(($TIMEON/60))
 SEC=$(($TIMEON-$MIN*60))
 HOR=$(($MIN/60))
 MIN=$(($MIN-$HOR*60))
 HOUR="${HOR}h:${MIN}m:${SEC}s"
 [[ $(echo $PID|bc) -gt 0 ]] && hwid="$hwid [\033[1;32mON\033[0m${yellow}] " || hwid="$hwid [\033[1;31mOFF\033[0m${yellow}]"
 TOTALPID="$(echo $PID|bc)/hwid"	#$MAXUSER"
 while [[ ${#hwid} -lt 45 ]]; do
 hwid=$hwid" "
 done
 while [[ ${#TOTALPID} -lt 13 ]]; do
 TOTALPID=$TOTALPID" "
 done
 while [[ ${#HOUR} -lt 8 ]]; do
 HOUR=$HOUR" "
 done
 echo -e "${yellow}USER:${gren}$user $sep $TOTALPID $HOUR\n   ${red}HWID:${yellow} $hwid\n$(msg -bar)" >&2
 ) &
 pid=$!
 sleep 0.2s
 done
 while [[ -d /proc/$pid ]]; do
 sleep 2s
 done
 msg -bar
 msg -ne " Enter Para Continuar" && read enter
 ${SCPusr}/usercodes
 }
 monit_token () {
 clear
 clear
 msg -bar
 msg -tit
 red=$(tput setaf 1)
 gren=$(tput setaf 2)
 yellow=$(tput setaf 3)
 echo -e "$(fun_trans "\e[93m   MONITOR DE CONEXIONES SSH/DROPBEAR/SSL/OPENVPN")"
 msg -bar
 txtvar=$(printf '%-13s' " USUARIO")
 txtvar+=$(printf '%-20s' "CONEXIONES")
 txtvar+=$(printf '%-10s' "TIME/ON")
 echo -e "  \e[1;33m${txtvar}\e[0m"
 msg -bar
 cat_users=$(cat "/etc/passwd"|grep 'home'|grep 'token'|grep -v 'syslog')
 for i in `echo "$cat_users"|awk -F ':' '{print $1}'`; do
 token="$i"
 nom="$(echo "$cat_users"|grep -w "$i"|awk -F ':' '{print $5}'|cut -d ',' -f2)"
 user=$(printf '%-10s' " ${nom}")
 sep=$(printf '%-5s')
 _=$(
 PID="0+"
 [[ $(dpkg --get-selections|grep -w "openssh"|head -1) ]] && PID+="$(ps aux|grep -v grep|grep sshd|grep -w "$token"|grep -v root|wc -l)+"
 [[ $(dpkg --get-selections|grep -w "dropbear"|head -1) ]] && PID+="$(dropbear_pids|grep -w "${token}"|wc -l)+"
 [[ $(dpkg --get-selections|grep -w "openvpn"|head -1) ]] && [[ -e /etc/openvpn/openvpn-status.log ]] && [[ $(openvpn_pids|grep -w "$token"|cut -d'|' -f2) ]] && PID+="$(openvpn_pids|grep -w "$token"|cut -d'|' -f2)+"
 PID+="0"
 TIMEON="${TIMEUS[$token]}"
 [[ -z $TIMEON ]] && TIMEON=0
 MIN=$(($TIMEON/60))
 SEC=$(($TIMEON-$MIN*60))
 HOR=$(($MIN/60))
 MIN=$(($MIN-$HOR*60))
 HOUR="${HOR}h:${MIN}m:${SEC}s"
 [[ $(echo $PID|bc) -gt 0 ]] && token="$token [\033[1;32mON\033[0m${yellow}] " || token="$token [\033[1;31mOFF\033[0m${yellow}]"
 TOTALPID="$(echo $PID|bc)/token"	#$MAXUSER"
 while [[ ${#token} -lt 45 ]]; do
 token=$token" "
 done
 while [[ ${#TOTALPID} -lt 13 ]]; do
 TOTALPID=$TOTALPID" "
 done
 while [[ ${#HOUR} -lt 8 ]]; do
 HOUR=$HOUR" "
 done
 echo -e "${yellow}USER:${gren}$user $sep $TOTALPID $HOUR\n   ${red}TOKEN:${yellow} $token\n$(msg -bar)" >&2
 ) &
 pid=$!
 sleep 0.2s
 done
 while [[ -d /proc/$pid ]]; do
 sleep 2s
 done
 msg -bar
 msg -ne " Enter Para Continuar" && read enter
 ${SCPusr}/usercodes
 }
# Open VPN
newclient () {
#Nome #Senha
usermod -p $(openssl passwd -1 $2) $1
  while [[ ${newfile} != @(s|S|y|Y|n|N) ]]; do
   read -p "$(fun_trans "Crear Archivo Openvpn")? [S/N]: " -e -i S newfile
   tput cuu1 && tput dl1
  done
if [[ ${newfile} = @(s|S) ]]; then
cp /etc/openvpn/client-common.txt $HOME/$1.ovpn
echo "<key>
$(cat /etc/openvpn/client-key.pem)
</key>
<cert>
$(cat /etc/openvpn/client-cert.pem)
</cert>
<ca>
$(cat /etc/openvpn/ca.pem)
</ca>" >> $HOME/$1.ovpn
  while [[ ${ovpnauth} != @(s|S|y|Y|n|N) ]]; do
    read -p "$(fun_trans "Colocar la autenticacion de usuario en el archivo")? [S/N]: " -e -i S ovpnauth
    tput cuu1 && tput dl1
  done
  [[ ${ovpnauth} = @(n|N) ]] && sed -i "s;auth-user-pass;<auth-user-pass>\n$1\n$2\n</auth-user-pass>;g" $HOME/$1.ovpn
  cd $HOME
  zip ./$1.zip ./$1.ovpn > /dev/null 2>&1
  rm ./$1.ovpn > /dev/null 2>&1
  echo -e "\033[1;31m$(fun_trans "Archivo creado"): ($HOME/$1.zip)"
 fi
}
block_userfun () {
local USRloked="/etc/newadm-userlock"
local LIMITERLOG="${USRdatabase}/Limiter.log"
if [[ $2 = "-loked" ]]; then
[[ $(cat ${USRloked}|grep -w "$1") ]] && return 1
echo "USER: $1 (BLOQUEADO - MULTILOGUIN) $(date +%r)"
fi
if [[ $(cat ${USRloked}|grep -w "$1") ]]; then
usermod -U "$1" &>/dev/null
[[ -e ${USRloked} ]] && {
   newbase=$(cat ${USRloked}|grep -w -v "$1")
   [[ -e ${USRloked} ]] && rm ${USRloked}
   for value in `echo ${newbase}`; do
   echo $value >> ${USRloked}
   done
   }
[[ -e ${LIMITERLOG} ]] && [[ $(cat ${LIMITERLOG}|grep -w "$1") ]] && {
   newbase=$(cat ${LIMITERLOG}|grep -w -v "$1")
   [[ -e ${LIMITERLOG} ]] && rm ${LIMITERLOG}
   for value in `echo ${newbase}`; do
   echo $value >> ${LIMITERLOG}
   done
}
return 1
else
usermod -L "$1" &>/dev/null
echo $1 >> ${USRloked}
return 0
fi
}
block_user () {
local USRloked="/etc/newadm-userlock"
[[ ! -e ${USRloked} ]] && touch ${USRloked}
usuarios_ativos=($(mostrar_usuarios))
if [[ -z ${usuarios_ativos[@]} ]]; then
msg -verm "$(fun_trans "Ningun usuario registrado")"
msg -bar
return 1
else
msg -ama "$(fun_trans "Usuarios actualmente activos en el servidor")"
msg -bar
Numb=0
for us in $(echo ${usuarios_ativos[@]}); do
if [[ $(cat ${USRloked}|grep -w "${us}") ]]; then
msg -ne "[$Numb] ->" && echo -e "\033[1;33m ${us} \033[1;31mLoked"
else
msg -ne "[$Numb] ->" && echo -e "\033[1;33m ${us} \033[1;32mUnlocked"
fi
let Numb++
done
msg -bar
fi
msg -ama "$(fun_trans "Escriba o seleccione un usuario")"
msg -bar
unset selection
while [[ ${selection} = "" ]]; do
echo -ne "\033[1;37mSelect: " && read selection
tput cuu1 && tput dl1
done
if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
usuario_del="${usuarios_ativos[$selection]}"
else
usuario_del="$selection"
fi
[[ -z $usuario_del ]] && {
     msg -verm "$(fun_trans "Error, Usuario Invalido")"
     msg -bar
     return 1
     }
[[ ! $(echo ${usuarios_ativos[@]}|grep -w "$usuario_del") ]] && {
     msg -verm "$(fun_trans "Error, Usuario Invalido")"
     msg -bar
     return 1
     }
msg -ne "$(fun_trans "Usuario Selecionado"): " && echo -ne "$usuario_del "
block_userfun "$usuario_del" && msg -verm "[$(fun_trans "Bloqueado")]" || msg -verd "[$(fun_trans "Desbloqueado")]"
msg -bar
}
add_user () {
#nome senha Dias limite
[[ $(cat /etc/passwd |grep $1: |grep -vi [a-z]$1 |grep -v [0-9]$1 > /dev/null) ]] && return 1
valid=$(date '+%C%y-%m-%d' -d " +$3 days") && datexp=$(date "+%F" -d " + $3 days")
useradd -M -s /bin/false $1 -e ${valid} > /dev/null 2>&1 || return 1
(echo $2; echo $2)|passwd $1 2>/dev/null || {
    userdel --force $1
    return 1
    }
[[ -e ${USRdatabase} ]] && {
   newbase=$(cat ${USRdatabase}|grep -w -v "$1")
   echo "$1|$2|${datexp}|$4" > ${USRdatabase}
   for value in `echo ${newbase}`; do
   echo $value >> ${USRdatabase}
   done
   } || echo "$1|$2|${datexp}|$4" > ${USRdatabase}
}
renew_user_fun () {
#nome dias
datexp=$(date "+%F" -d " + $2 days") && valid=$(date '+%C%y-%m-%d' -d " + $2 days")
chage -E $valid $1 2> /dev/null || return 1
[[ -e ${USRdatabase} ]] && {
   newbase=$(cat ${USRdatabase}|grep -w -v "$1")
   useredit=$(cat ${USRdatabase}|grep -w "$1")
   pass=$(echo $useredit|cut -d'|' -f2)
   limit=$(echo $useredit|cut -d'|' -f4)
   echo "$1|$pass|${datexp}|$limit" > ${USRdatabase}
   for value in `echo ${newbase}`; do
   echo $value >> ${USRdatabase}
   done
   }
}
edit_user_fun () {
#nome senha dias limite
(echo "$2" ; echo "$2" ) |passwd $1 > /dev/null 2>&1 || return 1
datexp=$(date "+%F" -d " + $3 days") && valid=$(date '+%C%y-%m-%d' -d " + $3 days")
chage -E $valid $1 2> /dev/null || return 1
[[ -e ${USRdatabase} ]] && {
   newbase=$(cat ${USRdatabase}|grep -w -v "$1")
   echo "$1|$2|${datexp}|$4" > ${USRdatabase}
   for value in `echo ${newbase}`; do
   echo $value >> ${USRdatabase}
   done
   } || echo "$1|$2|${datexp}|$4" > ${USRdatabase}
}
rm_user () {
#nome
userdel --force "$1" &>/dev/null || return 1
[[ -e ${USRdatabase} ]] && {
   newbase=$(cat ${USRdatabase}|grep -w -v "$1")
   for value in `echo ${newbase}`; do
   echo $value >> ${USRdatabase}
   done
   }
}
mostrar_usuarios () {
for u in `awk -F : '$3 > 900 { print $1 }' /etc/passwd | grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
echo "$u"
done
}
dropbear_pids () {
local pids
local port_dropbear=`ps aux | grep dropbear | awk NR==1 | awk '{print $17;}'`
cat /var/log/auth.log|grep "$(date|cut -d' ' -f2,3)" > /var/log/authday.log
# cat /var/log/auth.log|tail -1000 > /var/log/authday.log
local log=/var/log/authday.log
local loginsukses='Password auth succeeded'
[[ -z $port_dropbear ]] && return 1
for port in `echo $port_dropbear`; do
 for pidx in $(ps ax |grep dropbear |grep "$port" |awk -F" " '{print $1}'); do
  pids="${pids}$pidx\n"
 done
done
for pid in `echo -e "$pids"`; do
  pidlogs=`grep $pid $log |grep "$loginsukses" |awk -F" " '{print $3}'`
  i=0
    for pidend in $pidlogs; do
    let i++
    done
    if [[ $pidend ]]; then
    login=$(grep $pid $log |grep "$pidend" |grep "$loginsukses")
    PID=$pid
    user=`echo $login |awk -F" " '{print $10}' | sed -r "s/'//g"`
    waktu=$(echo $login |awk -F" " '{print $2"-"$1,$3}')
    [[ -z $user ]] && continue
    echo "$user|$PID|$waktu"
    fi
done
}
openvpn_pids () {
#nome|#loguin|#rcv|#snd|#time
  byte () {
   while read B dummy; do
   [[ "$B" -lt 1024 ]] && echo "${B} bytes" && break
   KB=$(((B+512)/1024))
   [[ "$KB" -lt 1024 ]] && echo "${KB} Kb" && break
   MB=$(((KB+512)/1024))
   [[ "$MB" -lt 1024 ]] && echo "${MB} Mb" && break
   GB=$(((MB+512)/1024))
   [[ "$GB" -lt 1024 ]] && echo "${GB} Gb" && break
   echo $(((GB+512)/1024)) terabytes
   done
   }
for user in $(mostrar_usuarios); do
user="$(echo $user|sed -e 's/[^a-z0-9 -]//ig')"
[[ ! $(sed -n "/^${user},/p" /etc/openvpn/openvpn-status.log) ]] && continue
i=0
unset RECIVED; unset SEND; unset HOUR
 while read line; do
 IDLOCAL=$(echo ${line}|cut -d',' -f2)
 RECIVED+="$(echo ${line}|cut -d',' -f3)+"
 SEND+="$(echo ${line}|cut -d',' -f4)+"
 DATESEC=$(date +%s --date="$(echo ${line}|cut -d',' -f5|cut -d' ' -f1,2,3,4)")
 TIMEON="$(($(date +%s)-${DATESEC}))"
  MIN=$(($TIMEON/60)) && SEC=$(($TIMEON-$MIN*60)) && HOR=$(($MIN/60)) && MIN=$(($MIN-$HOR*60))
  HOUR+="${HOR}h:${MIN}m:${SEC}s\n"
  let i++
 done <<< "$(sed -n "/^${user},/p" /etc/openvpn/openvpn-status.log)"
RECIVED=$(echo $(echo ${RECIVED}0|bc)|byte)
SEND=$(echo $(echo ${SEND}0|bc)|byte)
HOUR=$(echo -e $HOUR|sort -n|tail -1)
echo -e "$user|$i|$RECIVED|$SEND|$HOUR"
done
}
err_fun () {
     case $1 in
     1)msg -verm "Usuario Nulo"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     2)msg -verm "Usuario con nombre muy corto"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     3)msg -verm "Usuario con nombre muy grande"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     4)msg -verm "Contrasena Nula"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     5)msg -verm "Contrasena Muy corta"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     6)msg -verm "Contrasena Muy Grande"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     7)msg -verm "Duracion Nula"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     8)msg -verm "Duracion no valida utiliza numeros"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     9)msg -verm "Duracion maxima de un ano"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     11)msg -verm "Limite Nulo"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     12)msg -verm "Limite invalido utilize numeros"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     13)msg -verm "Limite maximo es de 999"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     14)msg -verm "Usuario Ya existe"; sleep 2s; tput cuu1; tput dl1; tput cuu1; tput dl1;;
     esac
}
new_user () {
usuarios_ativos=($(mostrar_usuarios))
if [[ -z ${usuarios_ativos[@]} ]]; then
msg -verm "Ningun usuario registrado"
msg -bar
else
msg -ama "Usuarios actualmente activos en el servidor"
msg -bar
for us in $(echo ${usuarios_ativos[@]}); do
msg -ne "User: " && echo "${us}"
done
msg -bar
fi
while true; do
     msg -ne "Nombre del nuevo usuario"
     read -p ": " nomeuser
     nomeuser="$(echo $nomeuser|sed -e 's/[^a-z0-9 -]//ig')"
     if [[ -z $nomeuser ]]; then
     err_fun 1 && continue
     elif [[ "${#nomeuser}" -lt "4" ]]; then
     err_fun 2 && continue
     elif [[ "${#nomeuser}" -gt "24" ]]; then
     err_fun 3 && continue
     elif [[ "$(echo ${usuarios_ativos[@]}|grep -w "$nomeuser")" ]]; then
     err_fun 14 && continue
     fi
     break
done
while true; do
     msg -ne "Contrasena Para El Nuevo usuario"
     read -p ": " senhauser
     if [[ -z $senhauser ]]; then
     err_fun 4 && continue
     elif [[ "${#senhauser}" -lt "6" ]]; then
     err_fun 5 && continue
     elif [[ "${#senhauser}" -gt "20" ]]; then
     err_fun 6 && continue
     fi
     break
done
while true; do
     msg -ne "Tiempo de Duracion del nuevo usuario"
     read -p ": " diasuser
     if [[ -z "$diasuser" ]]; then
     err_fun 7 && continue
     elif [[ "$diasuser" != +([0-9]) ]]; then
     err_fun 8 && continue
     elif [[ "$diasuser" -gt "360" ]]; then
     err_fun 9 && continue
     fi 
     break
done
while true; do
     msg -ne "Limite de conexion del nuevo usuario"
     read -p ": " limiteuser
     if [[ -z "$limiteuser" ]]; then
     err_fun 11 && continue
     elif [[ "$limiteuser" != +([0-9]) ]]; then
     err_fun 12 && continue
     elif [[ "$limiteuser" -gt "999" ]]; then
     err_fun 13 && continue
     fi
     break
done
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     msg -ne " IP del servidor: " && echo -e "$(meu_ip)"
     msg -ne " Usuario: " && echo -e "$nomeuser"
     msg -ne " contrasena: " && echo -e "$senhauser"
     msg -ne " Dias de Duracion: " && echo -e "$diasuser"
     msg -ne " Fecha de expiracion: " && echo -e "$(date "+%F" -d " + $diasuser days")"
     msg -ne " Limite de conexion: " && echo -e "$limiteuser"
       
msg -bar
add_user "${nomeuser}" "${senhauser}" "${diasuser}" "${limiteuser}" && msg -ama "Usuario creado con exito" || msg -verm "Error, Usuario no creado!!"
[[ $(dpkg --get-selections|grep -w "openvpn"|head -1) ]] && [[ -e /etc/openvpn/openvpn-status.log ]] && newclient "$nomeuser" "$senhauser"
msg -bar
}
remove_user () {
usuarios_ativos=($(mostrar_usuarios))
if [[ -z ${usuarios_ativos[@]} ]]; then
msg -verm "$(fun_trans "Ningun usuario registrado")"
msg -bar
return 1
else
msg -ama "$(fun_trans "Usuarios actualmente activos en el servidor")"
msg -bar
i=0
for us in $(echo ${usuarios_ativos[@]}); do
msg -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
let i++
done
msg -bar
fi
msg -ama "$(fun_trans "Escriba o seleccione un usuario")"
msg -bar
unset selection
while [[ -z ${selection} ]]; do
echo -ne "\033[1;37m$(fun_trans "Seleccione una opcion"): " && read selection
tput cuu1 && tput dl1
done
if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
usuario_del="${usuarios_ativos[$selection]}"
else
usuario_del="$selection"
fi
[[ -z $usuario_del ]] && {
     msg -verm "$(fun_trans "Error, Usuario Invalido")"
     msg -bar
     return 1
     }
[[ ! $(echo ${usuarios_ativos[@]}|grep -w "$usuario_del") ]] && {
     msg -verm "$(fun_trans "Error, Usuario Invalido")"
     msg -bar
     return 1
     }
msg -ne "$(fun_trans "Usuario Selecionado"): " && echo -ne "$usuario_del"
rm_user "$usuario_del" && msg -verd " [$(fun_trans "Eliminado")]" || msg -verm " [$(fun_trans "No Eliminado")]"
msg -bar
}
renew_user () {
usuarios_ativos=($(mostrar_usuarios))
if [[ -z ${usuarios_ativos[@]} ]]; then
msg -verm "$(fun_trans "Ningun usuario registrado")"
msg -bar
return 1
else
msg -ama "$(fun_trans "Usuarios actualmente activos en el servidor")"
msg -bar
i=0
for us in $(echo ${usuarios_ativos[@]}); do
msg -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
let i++
done
msg -bar
fi
msg -ama "$(fun_trans "Escriba o seleccione un usuario")"
msg -bar
unset selection
while [[ -z ${selection} ]]; do
echo -ne "\033[1;37m$(fun_trans "Seleccione la opcion"): " && read selection
tput cuu1
tput dl1
done
if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
useredit="${usuarios_ativos[$selection]}"
else
useredit="$selection"
fi
[[ -z $useredit ]] && {
     msg -verm "$(fun_trans "Error, Usuario Invalido")"
     msg -bar
     return 1
     }
[[ ! $(echo ${usuarios_ativos[@]}|grep -w "$useredit") ]] && {
     msg -verm "$(fun_trans "Error, Usuario Invalido")"
     msg -bar
     return 1
     }
while true; do
     msg -ne "$(fun_trans "Nuevo Tiempo de Duracion de"): $useredit"
     read -p ": " diasuser
     if [[ -z "$diasuser" ]]; then
     echo -e '\n\n\n'
     err_fun 7 && continue
     elif [[ "$diasuser" != +([0-9]) ]]; then
     echo -e '\n\n\n'
     err_fun 8 && continue
     elif [[ "$diasuser" -gt "360" ]]; then
     echo -e '\n\n\n'
     err_fun 9 && continue
     fi
     break
done
msg -bar
renew_user_fun "${useredit}" "${diasuser}" && msg -ama "$(fun_trans "Usuario Modificado Con Exito!!!")" || msg -verm "$(fun_trans "Error, Usuario no modificado")"
msg -bar
}
edit_user () {
usuarios_ativos=($(mostrar_usuarios))
if [[ -z ${usuarios_ativos[@]} ]]; then
msg -verm "$(fun_trans "Ningun usuario registrado")"
msg -bar
return 1
else
msg -ama "$(fun_trans "Usuarios Actualmente activos en el servidor")"
msg -bar
i=0
for us in $(echo ${usuarios_ativos[@]}); do
msg -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
let i++
done
msg -bar
fi
msg -ama "$(fun_trans "Escriba o seleccione un usuario")"
msg -bar
unset selection
while [[ -z ${selection} ]]; do
echo -ne "\033[1;37m$(fun_trans "Seleccione la opcion"): " && read selection
tput cuu1; tput dl1
done
if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
useredit="${usuarios_ativos[$selection]}"
else
useredit="$selection"
fi
[[ -z $useredit ]] && {
     msg -verm "$(fun_trans "Error, Usuario Invalido")"
     msg -bar
     return 1
     }
[[ ! $(echo ${usuarios_ativos[@]}|grep -w "$useredit") ]] && {
     msg -verm "$(fun_trans "Error, Usuario Invalido")"
     msg -bar
     return 1
     }
while true; do
msg -ne "$(fun_trans "Usuario Selecionado"): " && echo -e "$useredit"
     msg -ne "$(fun_trans "Nueva Contrasena de"): $useredit"
     read -p ": " senhauser
     if [[ -z "$senhauser" ]]; then
     err_fun 4 && continue
     elif [[ "${#senhauser}" -lt "6" ]]; then
     err_fun 5 && continue
     elif [[ "${#senhauser}" -gt "20" ]]; then
     err_fun 6 && continue
     fi
     break
done
while true; do
     msg -ne "$(fun_trans "Dias de Duracion de"): $useredit"
     read -p ": " diasuser
     if [[ -z "$diasuser" ]]; then
     err_fun 7 && continue
     elif [[ "$diasuser" != +([0-9]) ]]; then
     err_fun 8 && continue
     elif [[ "$diasuser" -gt "360" ]]; then
     err_fun 9 && continue
     fi
     break
done
while true; do
     msg -ne "$(fun_trans "Nuevo Limite de Conexion de"): $useredit"
     read -p ": " limiteuser
     if [[ -z "$limiteuser" ]]; then
     err_fun 11 && continue
     elif [[ "$limiteuser" != +([0-9]) ]]; then
     err_fun 12 && continue
     elif [[ "$limiteuser" -gt "999" ]]; then
     err_fun 13 && continue
     fi
     break
done
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     tput cuu1 && tput dl1
     msg -ne "$(fun_trans "Usuario"): " && echo -e "$useredit"
     msg -ne "$(fun_trans "Contrasena"): " && echo -e "$senhauser"
     msg -ne "$(fun_trans "Dias de Duracion"): " && echo -e "$diasuser"
     msg -ne "$(fun_trans "Fecha de expiracion"): " && echo -e "$(date "+%F" -d " + $diasuser days")"
     msg -ne "$(fun_trans "Limite de conexion"): " && echo -e "$limiteuser"
msg -bar
edit_user_fun "${useredit}" "${senhauser}" "${diasuser}" "${limiteuser}" && msg -ama "$(fun_trans "Usuario Modificado Con Exito")" || msg -verm "$(fun_trans "Error, Usuario no modificado")"
msg -bar
}
detail_user () {
red=$(tput setaf 1)
gren=$(tput setaf 2)
yellow=$(tput setaf 3)
if [[ ! -e "${USRdatabase}" ]]; then
msg -verm "$(fun_trans "No se ha identificado una base de datos con usuarios")"
msg -verm "$(fun_trans "Los usuarios a seguir no contienen ninguna informacion")"
msg -bar2
fi
txtvar=$(printf '%-16s' "USUARIO")
txtvar+=$(printf '%-16s' "CONTRASENA")
txtvar+=$(printf '%-16s' "FECHA")
txtvar+=$(printf '%-6s' "LIMITE")
echo -e "\033[1;33m${txtvar}"
msg -bar2
VPSsec=$(date +%s)
while read user; do
unset txtvar
data_user=$(chage -l "$user" |grep -i co |awk -F ":" '{print $2}')
txtvar=$(printf '%-21s' "${yellow}$user")
if [[ -e "${USRdatabase}" ]]; then
  if [[ $(cat ${USRdatabase}|grep -w "${user}") ]]; then
    txtvar+="$(printf '%-21s' "${yellow}$(cat ${USRdatabase}|grep -w "${user}"|cut -d'|' -f2)")"
    DateExp="$(cat ${USRdatabase}|grep -w "${user}"|cut -d'|' -f3)"
    DataSec=$(date +%s --date="$DateExp")
    if [[ "$VPSsec" -gt "$DataSec" ]]; then    
    EXPTIME="${red}[Exp]"
    else
    EXPTIME="${gren}[$(($(($DataSec - $VPSsec)) / 86400))]"
    fi
    txtvar+="$(printf '%-26s' "${yellow}${DateExp}${EXPTIME}")"
    txtvar+="$(printf '%-11s' "${yellow}$(cat ${USRdatabase}|grep -w "${user}"|cut -d'|' -f4)")"
    else
    txtvar+="$(printf '%-21s' "${red}???")"
    txtvar+="$(printf '%-21s' "${red}???")"
    txtvar+="$(printf '%-11s' "${red}???")"
  fi
fi
echo -e "$txtvar"
done <<< "$(mostrar_usuarios)"
msg -bar2
}
monit_user () {
yellow=$(tput setaf 3)
gren=$(tput setaf 2)
msg -verm "$(fun_trans "Monitor de conexiones de usuario")"
msg -bar
txtvar=$(printf '%-20s' "USUARIO")
txtvar+=$(printf '%-19s' "CONEXION")
txtvar+=$(printf '%-16s' "TIEMPO/ON")
echo -e "\033[1;33m${txtvar}"
msg -bar
while read user; do
 _=$(
PID="0+"
[[ $(dpkg --get-selections|grep -w "openssh"|head -1) ]] && PID+="$(ps aux|grep -v grep|grep sshd|grep -w "$user"|grep -v root|wc -l)+"
[[ $(dpkg --get-selections|grep -w "dropbear"|head -1) ]] && PID+="$(dropbear_pids|grep -w "${user}"|wc -l)+"
[[ $(dpkg --get-selections|grep -w "openvpn"|head -1) ]] && [[ -e /etc/openvpn/openvpn-status.log ]] && [[ $(openvpn_pids|grep -w "$user"|cut -d'|' -f2) ]] && PID+="$(openvpn_pids|grep -w "$user"|cut -d'|' -f2)+"
PID+="0"
TIMEON="${TIMEUS[$user]}"
[[ -z $TIMEON ]] && TIMEON=0
MIN=$(($TIMEON/60))
SEC=$(($TIMEON-$MIN*60))
HOR=$(($MIN/60))
MIN=$(($MIN-$HOR*60))
HOUR="${HOR}h:${MIN}m:${SEC}s"
[[ -z $(cat ${USRdatabase}|grep -w "${user}") ]] && MAXUSER="?" || MAXUSER="$(cat ${USRdatabase}|grep -w "${user}"|cut -d'|' -f4)"
[[ $(echo $PID|bc) -gt 0 ]] && user="$user [\033[1;32mON\033[0m${yellow}]" || user="$user [\033[1;31mOFF\033[0m${yellow}]"
TOTALPID="$(echo $PID|bc)/$MAXUSER"
 while [[ ${#user} -lt 45 ]]; do
 user=$user" "
 done
 while [[ ${#TOTALPID} -lt 13 ]]; do
 TOTALPID=$TOTALPID" "
 done
 while [[ ${#HOUR} -lt 8 ]]; do
 HOUR=$HOUR" "
 done
echo -e "${yellow}$user $TOTALPID $HOUR" >&2
) &
pid=$!
sleep 0.5s
done <<< "$(mostrar_usuarios)"
while [[ -d /proc/$pid ]]; do
sleep 1s
done
msg -bar
}
rm_vencidos () {
red=$(tput setaf 1)
gren=$(tput setaf 2)
yellow=$(tput setaf 3)
txtvar=$(printf '%-25s' "USUARIO")
txtvar+=$(printf '%-20s' "VALIDEZ")
echo -e "\033[1;33m${txtvar}"
msg -bar
expired="${red}$(fun_trans "Expirado")"
valid="${gren}$(fun_trans "Usuario Valido")"
never="${yellow}$(fun_trans "Usuario Ilimitado")"
removido="${red}$(fun_trans "Eliminado")"
DataVPS=$(date +%s)
while read user; do
DataUser=$(chage -l "${user}" |grep -i co|awk -F ":" '{print $2}')
usr=$user
 while [[ ${#usr} -lt 20 ]]; do
 usr=$usr" "
 done
[[ "$DataUser" = " never" ]] && {
   echo -e "${yellow}$usr $never"
   continue
   }
DataSEC=$(date +%s --date="$DataUser")
if [[ "$DataSEC" -lt "$DataVPS" ]]; then
echo -ne "${yellow}$usr $expired"
rm_user "$user" && echo -e "($removido)"
else
echo -e "${yellow}$usr $valid"
fi
done <<< "$(mostrar_usuarios)"
msg -bar
}
verif_fun () {
# DECLARANDO VARIAVEIS PRIMARIAS
    local conexao
    local limite
    local TIMEUS
    declare -A conexao
    declare -A limite
    declare -A TIMEUS
    local LIMITERLOG="${SCPusr}/Limiter.log"
    [[ $(dpkg --get-selections|grep -w "openssh"|head -1) ]] && local SSH=ON || local SSH=OFF
    [[ $(dpkg --get-selections|grep -w "dropbear"|head -1) ]] && local DROP=ON || local DROP=OFF
    [[ $(dpkg --get-selections|grep -w "openvpn"|head -1) ]] && [[ -e /etc/openvpn/openvpn-status.log ]] && local OPEN=ON || local OPEN=OFF
    while true; do
    unset EXPIRED
    unset ONLINES
    unset BLOQUEADO
    [[ -e ${MyTIME} ]] && source ${MyTIME}
    local TimeNOW=$(date +%s)
    # INICIA VERIFICA��O
    while read user; do
           echo -ne "\033[1;33mUSUARIO: \033[1;32m$user "
           if [[ ! $(echo $(mostrar_usuarios)|grep -w "$user") ]]; then
              echo -e "\033[1;31mNO EXISTE"
              continue
           fi
           local DataUser=$(chage -l "${user}" |grep -i co|awk -F ":" '{print $2}')
           if [[ ! -z "$(echo $DataUser|grep never)" ]]; then
               echo -e "\033[1;31mILIMITADO" 
               continue
           fi
           local DataSEC=$(date +%s --date="$DataUser")
           if [[ "$DataSEC" -lt "$TimeNOW" ]]; then
              EXPIRED="1+"          
              block_userfun $user -loked && echo "USER: $user (BLOQUEADO - CADUCADO) $(date +%r)" >> $LIMITERLOG
              echo -e "\033[1;31m CADUCADO"
              continue
           fi
           local PID="0+"
           [[ $SSH = ON  ]] && PID+="$(ps aux|grep -v grep|grep sshd|grep -w "$user"|grep -v root|wc -l 2>/dev/null)+"
           [[ $DROP = ON  ]] && PID+="$(dropbear_pids|grep -w "$user"|wc -l 2>/dev/null)+"
           [[ $OPEN = ON  ]] && [[ $(openvpn_pids|grep -w "$user"|cut -d'|' -f2) ]] && PID+="$(openvpn_pids|grep -w "$user"|cut -d'|' -f2)+"
           local ONLINES+="$(echo ${PID}0|bc)+"
           local conexao[$user]="$(echo ${PID}0|bc)"
            if [[ ${conexao[$user]} -gt '0' ]]; then #CONTADOR DE TEMPO ONLINE
              [[ -z "${TIMEUS[$user]}" ]] && local TIMEUS[$user]=0
              [[ "${TIMEUS[$user]}" != +([0-9]) ]] && local TIMEUS[$user]=0
              local TIMEUS[$user]="$((2+${TIMEUS[$user]}))"
              local VARS="$(cat ${MyTIME}|grep -w -v "$user")"
              echo "TIMEUS[$user]='${TIMEUS[$user]}'" > ${MyTIME}
              for variavel in $(echo ${VARS}); do echo "${variavel}" >> ${MyTIME}; done
            fi           
           local limite[$user]="$(cat ${USRdatabase}|grep -w "${user}"|cut -d'|' -f4)"
           [[ -z "${limite[$user]}" ]] && continue
           [[ "${limite[$user]}" != +([0-9]) ]] && continue
           if [[ "${conexao[$user]}" -gt "${limite[$user]}" ]]; then
           local lock=$(block_userfun $user -loked)
           pkill -u $user
		   
		   droplim=`dropbear_pids|grep -w "$user"|cut -d'|' -f2` 
		   kill -9 $droplim &>/dev/null
		   
		   openlim=`openvpn_pids|grep -w "$user"|cut -d'|' -f2`
		   kill -9 $openlim &>/dev/null
           [[ ! -z $lock ]] && echo "$lock" >> $LIMITERLOG
    
           echo -e "\033[1;31m EXCEDIO LIMITE"
           continue
           fi
           echo -e "\033[1;33m OK! \033[1;31m${conexao[$user]} CONEXIONES"
           BLOQUEADO="$(wc -l /etc/newadm-userlock | awk '{print $1}')"
		   #BLOQUEADO="$(grep -c BLOCK-MULTILOGIN /etc/newadm/ger-user/Limiter.log)"
		   BLOQUEADO2="$(echo ${BLOQUEADO}|bc)0"
		   BLOQUEADO3="/10"
		   EXPIRADO="$(grep -c EXPIRADO /etc/newadm/ger-user/Limiter.log)"
		   EXPIRADO2="$(echo ${EXPIRADO}|bc)0"
		   EXPIRADO3="/10"
    done <<< "$(mostrar_usuarios)"
    echo "${ONLINES}0"|bc > ${SCPdir}/USRonlines
    echo "${EXPIRED}0"|bc > ${SCPdir}/USRexpired
    echo "${EXPIRADO2}${EXPIRADO3}"|bc > ${SCPdir}/USRexpired
	echo "${BLOQUEADO2}${BLOQUEADO3}"|bc > ${SCPdir}/USRbloqueados
	limseg="$(less /etc/newadm/ger-user/tiemlim.log)"
    
    sleep 2s # TEMPO DE ESPERA DO LOOP
    clear
    done
}
backup_fun () {
msg -ama "$(fun_trans "HERRAMIENTA DE BACKUP DE USUARIOS")"
msg -bar
menu_func "CREAR BACKUP" "RESTAURAR BACKUP"
msg -bar
unset selection
while [[ ${selection} != @([1-2]) ]]; do
echo -ne "\033[1;37m$(fun_trans "Seleccione la opcion"): " && read selection
tput cuu1 && tput dl1
done
case ${selection} in
1)
cp ${USRdatabase} $HOME/Backup-adm
msg -azu "$(fun_trans "Procedimiento Hecho")"
echo -e "\033[1;31mBACKUP > [\033[1;32m$HOME/Backup-adm\033[1;31m]"
;;
2)
while [[ ! -e ${dirbackup} ]]; do
echo -ne "\033[1;37m$(fun_trans "Escriba la ubicacion de la copia de seguridad"): " && read dirbackup
tput cuu1 && tput dl1
done
VPSsec=$(date +%s)
while read line; do
nome=$(echo ${line}|cut -d'|' -f1)
[[ $(echo $(mostrar_usuarios)|grep -w "$nome") ]] && {
  msg -verm "$nome [ERROR]"
  continue
  }
senha=$(echo ${line}|cut -d'|' -f2)
DateExp=$(echo ${line}|cut -d'|' -f3)
DataSec=$(date +%s --date="$DateExp")
[[ "$VPSsec" -lt "$DataSec" ]] && dias="$(($(($DataSec - $VPSsec)) / 86400))" || dias="30"
limite=$(echo ${line}|cut -d'|' -f4)
add_user "$nome" "$senha" "$dias" "$limite" && msg -verd "$nome [OK]" || msg -verm "$nome [ERROR]"
done < ${dirbackup}
;;
esac
msg -bar
}

##LIMITADOR 

verif_funx () {

echo -e "\033[1;32m             LIMITADOR DE CUENTAS"
msg -bar
echo -e "Esta Opcion Limita las Conexiones de SSH/SSL/DROPBEAR"
PIDVRF="$(ps aux|grep "${SCPusr}/usercodes verificar"|grep -v grep|awk '{print $2}')"
if [[ -z $PIDVRF ]]; then
msg -bar
echo -ne "\033[1;96m   ¿Cada cuantos segundos ejecutar el limitador?\n\033[1;97m  +Segundos = -Uso de CPU | -Segundos = +Uso de CPU\033[0;92m \n                Predeterminado:\033[1;37m 120s\n     Cuantos Segundos (Numeros Unicamente): " && read tiemlim   
[[ -z "$tiemlim" ]] && tiemlim="120"
echo "${tiemlim}" > /etc/newadm/ger-user/tiemlim.log
cd ${SCPusr}
screen -dmS very ${SCPusr}/usercodes verificar
else
for pid in $(echo $PIDVRF); do
kill -9 $pid &>/dev/null
done
[[ -e ${SCPdir}/USRonlines ]] && rm ${SCPdir}/USRonlines
[[ -e ${SCPdir}/USRexpired ]] && rm ${SCPdir}/USRexpired
[[ -e ${SCPdir}/USRbloqueados ]] && rm ${SCPdir}/USRbloqueados
fi
msg -bar
[[ -z ${VERY} ]] && verificar="\033[1;32m ACTIVADO " || verificar="\033[1;31m DESACTIVADO "
echo -e "            $verificar  --  CON EXITO"
msg -bar
}

##DESBLOEUEAR

verif2_funx () {
echo -e "\033[1;32m      DESBLOQUEO AUT. Y LIMPIADOR DE EXPIARDOS"
msg -bar
echo -e "Esta opcion desbloquea cada 60 segundos a usuarios\nbloqueados por el limitador y limpia los usuarios expirados"
PIDVRF2="$(ps aux|grep "${SCPusr}/usercodes desbloqueo"|grep -v grep|awk '{print $2}')"
if [[ -z $PIDVRF2 ]]; then
msg -bar
echo -ne "\033[1;96m   ¿Cada cuantos segundos ejecutar el desbloqueador?\n\033[1;97m  +Segundos = -Uso de CPU | -Segundos = +Uso de CPU\033[0;92m \n                Predeterminado:\033[1;37m 300s\n     Cuantos Segundos (Numeros Unicamente): " && read tiemdes   
[[ -z "$tiemdes" ]] && tiemdes="300"
echo "${tiemdes}" > /etc/newadm/ger-user/tiemdes.log
cd ${SCPusr}
screen -dmS very2 ${SCPusr}/usercodes desbloqueo
else
for pid in $(echo $PIDVRF2); do
kill -9 $pid &>/dev/null
done

fi
msg -bar
[[ -z ${VERY2} ]] && desbloqueo="\033[1;32m ACTIVADO " || desbloqueo="\033[1;31m DESACTIVADO "
echo -e "            $desbloqueo  --  CON EXITO"
msg -bar
}

cleanreg () {
sudo rm -rf /etc/newadmin/ger-user/Limiter.log
}
userdell () {
echo -e "\033[1;37mATENCION ESTO REMOVERA TODOS LOS USUARIOS, NO FUNCIONA CON OPENVPN...\033[0m"
msg -bar
sleep 1s 
echo -e "\033[1;37m \033[0m \033[1;31mESTA SEGURO\033[0m \033[1;37m?\033[0m \033[1;31mSELECCIONE [s/n]\033[0m \033[1;33mPARA CONTINUAR\033[0m"
msg -bar
read -p "Opcion: " -e -i s remov
if [ "$remov" = "s" ]
then
for u in `awk -F : '$3 > 900 { print $1 }' /etc/passwd | grep -v "nobody" |grep -vi polkitd |grep -vi system-`; do
userdel $u
done
msg -bar
echo -e "\033[1;31mUSUARIOS ELIMINADOS CON EXITO!!\033[0m"
sleep 4s
else
msg -bar
echo -e "\033[1;31mOPERACION CANCELADA\033[0m"
  sleep 4s
adm
fi
 }
baner_fun () {
local2="/etc/dropbear/banner"
chk=$(cat /etc/ssh/sshd_config | grep -v "Banner")
while read line; do
echo "$line" >> /tmp/ssh-conf
done <<< "$chk"
mv -f /tmp/ssh-conf /etc/ssh/sshd_config
echo "Banner /etc/bannerssh" >> /etc/ssh/sshd_config
local="/etc/bannerssh"
msg -verd "$(fun_trans "Bienvenido al instalador del banner Admin VPS")"
msg -bar
msg -ne "$(fun_trans "Escriba el titulo del banner"): " && read ban_ner
echo -e " \033[1;32m[1] >\033[1;32m $(fun_trans "Verde")"
echo -e " \033[1;32m[2] >\033[1;31m $(fun_trans "rojo")"
echo -e " \033[1;32m[3] >\033[1;34m $(fun_trans "Azul")"
echo -e " \033[1;32m[4] >\033[1;33m $(fun_trans "Amarillo")"
echo -e " \033[1;32m[5] >\033[1;35m $(fun_trans "purpura")"
msg -ne "$(fun_trans "Perfecto Ahora Selecione Un Color"): " && read ban_ner_cor
echo '<h1><font></font></h1>' > $local
if [[ "$ban_ner_cor" = "1" ]]; then
echo '<h1><font color="green">' >> $local
elif [[ "$ban_ner_cor" = "2" ]]; then
echo '<h1><font color="red">' >> $local
elif [[ "$ban_ner_cor" = "3" ]]; then
echo '<h1><font color="blue">' >> $local
elif [[ "$ban_ner_cor" = "4" ]]; then
echo '<h1><font color="yellow">' >> $local
elif [[ "$ban_ner_cor" = "5" ]]; then
echo '<h1><font color="purple">' >> $local
else
echo '<h1><font color="blue">' >> $local
fi
echo "$ban_ner" >> $local
echo '</font></h1>' >> $local
echo '<h1><font></font></h1>' >> $local
txt_font () {
msg -ne "$(fun_trans "escriba el mensaje secundario"): " && read ban_ner2
echo -e " \033[1;32m[1] >\033[1;32m $(fun_trans "Verde")"
echo -e " \033[1;32m[2] >\033[1;31m $(fun_trans "rojo")"
echo -e " \033[1;32m[3] >\033[1;34m $(fun_trans "Azul")"
echo -e " \033[1;32m[4] >\033[1;33m $(fun_trans "Amarillo")"
echo -e " \033[1;32m[5] >\033[1;35m $(fun_trans "Purpura")"
msg -ne "$(fun_trans "Perfecto Ahora Seleccione Un Color"): " && read ban_ner2_cor
if [ "$ban_ner2_cor" = "1" ]; then
echo '<h6><font color="green">' >> $local
elif [ "$ban_ner2_cor" = "2" ]; then
echo '<h6><font color="red">' >> $local
elif [ "$ban_ner2_cor" = "3" ]; then
echo '<h6><font color="blue">' >> $local
elif [ "$ban_ner2_cor" = "4" ]; then
echo '<h6><font color="yellow">' >> $local
elif [ "$ban_ner2_cor" = "5" ]; then
echo '<h6><font color="purple">' >> $local
else
echo '<h6><font color="red">' >> $local
fi
echo "$ban_ner2" >> $local
echo "</h6></font>" >> $local
}
while true; do
msg -ne "$(fun_trans "Añadir Mensaje Secundario")? [S/N]: " && read sin_nao
if [[ "$sin_nao" = @(s|S|y|Y) ]]; then
txt_font
elif [[ "$sin_nao" = @(n|N) ]]; then
break
fi
done
#echo '</h8><font color="purple">new�</font></h8>' >> $local
echo '<h1><font></font></h1>' >> $local
if [[ -e "$local2" ]]; then
rm $local2  > /dev/null 2>&1
cp $local $local2 > /dev/null 2>&1
fi
msg -bar && msg -verd "$(fun_trans "Banner agregado con exito")" && msg -bar
service ssh restart > /dev/null 2>&1 &
service sshd restart > /dev/null 2>&1 & 
service dropbear restart > /dev/null 2>&1 &
}

baner_fun2 () {
local="/etc/bannerssh"
rm -rf $local  > /dev/null 2>&1
local2="/etc/dropbear/banner"
chk=$(cat /etc/ssh/sshd_config | grep Banner)
if [ "$(echo "$chk" | grep -v "#Banner" | grep Banner)" != "" ]; then
local=$(echo "$chk" |grep -v "#Banner" | grep Banner | awk '{print $2}')
 else
echo "" >> /etc/ssh/sshd_config
echo "Banner /etc/bannerssh" >> /etc/ssh/sshd_config
local="/etc/bannerssh"
fi
msg -verd "$(fun_trans  "Bienvenido al instalador del BANNER-SSH/DROPBEAR")"
msg -bar
msg -ne "$(fun_trans  "Escriba el mensaje principal del BANNER en HTML"): \n" && read ban_ner
msg -bar
credi="$(less /etc/newadm/message.txt)"
echo "$ban_ner" >> $local
echo '<p style="text-align: center;"><strong><span style="color: #ff0000;">Admin Vps&reg;</span> |&nbsp;</strong><span style="color: #0000ff;"><strong>'$credi'</strong></span></p>' >> $local
if [[ -e "$local2" ]]; then
rm $local2  > /dev/null 2>&1
cp $local $local2 > /dev/null 2>&1
fi 
msg -verd "$(fun_trans  "Banner Agregado Con !!EXITO¡¡")" && msg -bar
service dropbear stop 2>/dev/null
service sshd restart 2>/dev/null
service dropbear restart 2>/dev/null
sleep 3s
}

desbloqueo_auto () {
while true; do
Desbloqueo.sh 2>/dev/null
tiemdes="$(less /etc/newadm/ger-user/tiemdes.log)"
sleep $tiemdes
    done
}

rec_total () {
echo -e "\033[1;32m  REGISTRO TOTAL DE CUENTAS VIEJAS Y NUEVAS"
msg -bar
txtvar=$(printf '%-15s' "USUARIO")
txtvar+=$(printf '%-20s' "CONTRASEÑA")
txtvar+=$(printf '%-13s' "EXPIRACION")
txtvar+=$(printf '%-10s' "LIMITE")
echo -e "\033[1;33m${txtvar}"
echo -e " "
cat /etc/ADMuser
msg -bar
}
# LIMITADOR AUTO
if [[ "$1" = "verificar" ]]; then
verif_fun
exit
fi
[[ -z ${VERY} ]] && verificar="\033[1;31m[DESACTIVADO]" || verificar="\033[1;32m[ACTIVO]"

# DESBLOQUEO AUTO
if [[ "$1" = "desbloqueo" ]]; then
desbloqueo_auto
exit
fi
[[ -z ${VERY2} ]] && desbloqueo="\033[1;31m[DESACTIVADO]" || desbloqueo="\033[1;32m[ACTIVO]"
msg -ama "MENU DE ADMIMISTRACION DE USUARIOS"
msg -bar
echo -ne "$(msg -verd "[1]") $(msg -verm2 "=>>") " && msg -bra "\033[1mCREAR NUEVO USUARIO [\e[31m\e[43mSSH/HWID/TOKEN\e[0m\e[37m] "
echo -ne "$(msg -verd "[2]") $(msg -verm2 "=>>") " && msg -bra "\033[1mUSUARIO TEMPORAL"
echo -ne "$(msg -verd "[3]") $(msg -verm2 "=>>") " && msg -bra "\033[1;31mELIMINAR USUARIOS"
echo -ne "$(msg -verd "[4]") $(msg -verm2 "=>>") " && msg -bra "\033[1mBLOQUEAR O DESBLOQUEAR USUARIO"
echo -ne "$(msg -verd "[5]") $(msg -verm2 "=>>") " && msg -bra "\033[1mEDITAR USUARIO"
echo -ne "$(msg -verd "[6]") $(msg -verm2 "=>>") " && msg -bra "\033[1;32mRENOVAR USUARIO"
echo -ne "$(msg -verd "[7]") $(msg -verm2 "=>>") " && msg -bra "\033[1mDETALLES DE TODOS LOS USUARIOS"
echo -ne "$(msg -verd "[8]") $(msg -verm2 "=>>") " && msg -bra "\033[1mMONITOREAR USUARIOS CONECTADOS"
echo -ne "$(msg -verd "[9]") $(msg -verm2 "=>>") " && msg -bra "\033[1;31mELIMINAR USUARIOS VENCIDOS"
echo -ne "$(msg -verd "[10]") $(msg -verm2 "=>>") " && msg -bra "\033[1;31mELIMIMAR TODOS LOS USUARIOS"
echo -ne "$(msg -verd "[11]") $(msg -verm2 "=>>") " && msg -bra "\033[1mBACKUP DE USUARIOS"
echo -ne "$(msg -verd "[12]") $(msg -verm2 "=>>") " && msg -bra "\033[1;35mBANNER SSH"
echo -ne "$(msg -verd "[13]") $(msg -verm2 "=>>") " && msg -bra "\033[1;35mBANNER HTML"
echo -ne "$(msg -verd "[14]") $(msg -verm2 "=>>") " && msg -bra "\033[1mVER REGISTRO DE CUENTAS"
echo -ne "$(msg -verd "[15]") $(msg -verm2 "=>>") " && msg -bra "\033[1mLIMPIAR REGISTRO LIMITADOR"
echo -ne "$(msg -verd "[16]") $(msg -verm2 "=>>") " && msg -bra "\033[1;33m🔒 LIMITADOR DE CUENTAS 🔒 ${verificar}"
echo -ne "$(msg -verd "[17]") $(msg -verm2 "=>>") " && msg -bra "\033[1;33m🔓 DESBLOQUEO AUTOMATICO 🔓 ${desbloqueo}"
echo -ne "$(msg -verd "[0]") $(msg -verm2 "=>>") " && msg -bra "\033[1;41mREGRESAR AL MENU"
msg -bar
selection=$(selection_fun 18)
case ${selection} in
1)menu_crearuser;;
2)${SCPdir2}/Crear-Demo.sh "${idioma}";;
3)remove_user;;
4)block_user;;
5)edit_user;;
6)renew_user;;
7)menudata;;
8)menumoni;;
9)rm_vencidos;;
10)userdell;;
11)backup_fun;;
12)baner_fun;;
13)baner_fun2;;
14)rec_total;;
15)cleanreg;;
16)verif_funx;;
17)verif2_funx;;
18)
[[ -e "${SCPusr}/Limiter.log" ]] && {
 cat ${SCPusr}/Limiter.log
 msg -bar
 }
;;
esac
